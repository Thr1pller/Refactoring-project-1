import customtkinter as ctk
from tkinter import messagebox
from services.factory import BankAccount
from services.logger import log_action

# –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Ç–µ–º–∞
current_mode = "light"
ctk.set_appearance_mode(current_mode)
ctk.set_default_color_theme("blue")

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ
account = BankAccount.load()
if not account:
    from services.factory import AccountFactory
    account = AccountFactory.create_account("–Ü–≤–∞–Ω")

# –û—Å–Ω–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ
app = ctk.CTk()
app.title("–ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π –¥–æ–¥–∞—Ç–æ–∫")
app.geometry("500x500")
app.minsize(400, 400)

# –ü–µ—Ä–µ–º–∏–∫–∞—á —Ç–µ–º–∏
def toggle_theme():
    global current_mode
    current_mode = "dark" if current_mode == "light" else "light"
    ctk.set_appearance_mode(current_mode)
    theme_button.configure(text="üåô" if current_mode == "light" else "‚òÄÔ∏è")

theme_button = ctk.CTkButton(
    master=app,
    text="üåô",
    width=40,
    height=40,
    corner_radius=20,
    font=("Arial", 14),
    command=toggle_theme
)
theme_button.place(relx=0.95, rely=0.05, anchor="ne")

# –í–≤—ñ–¥ —Å—É–º–∏
label = ctk.CTkLabel(app, text="–°—É–º–∞:", font=("Arial", 14))
label.pack(pady=(60, 5))

amount_entry = ctk.CTkEntry(app, font=("Arial", 14), width=200)
amount_entry.pack(pady=5)

result_label = ctk.CTkLabel(app, text="", text_color="blue", font=("Arial", 13))
result_label.pack(pady=10)

# –î—ñ—ó
def get_amount():
    try:
        return float(amount_entry.get())
    except ValueError:
        messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
        return None

def deposit():
    amount = get_amount()
    if amount is not None:
        account.deposit(amount)
        account.save()
        result_label.configure(text=f"–ü–æ–ø–æ–≤–Ω–µ–Ω–æ –Ω–∞ {amount} –≥—Ä–Ω.")
        log_action(f"–î–µ–ø–æ–∑–∏—Ç: {amount}")

def withdraw():
    amount = get_amount()
    if amount is not None:
        account.withdraw(amount)
        account.save()
        result_label.configure(text=f"–ó–Ω—è—Ç–æ {amount} –≥—Ä–Ω.")
        log_action(f"–ó–Ω—è—Ç—Ç—è: {amount}")

def show_balance():
    result_label.configure(text=f"–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {account.balance} –≥—Ä–Ω.")
    log_action("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É")

def show_history():
    history = "\n".join(account.transactions.to_list())
    if not history:
        history = "–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è."
    messagebox.showinfo("–Ü—Å—Ç–æ—Ä—ñ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π", history)
    log_action("–ü–µ—Ä–µ–≥–ª—è–¥ —ñ—Å—Ç–æ—Ä—ñ—ó")

def exit_app():
    app.quit()

# –ö–Ω–æ–ø–∫–∏ –¥—ñ–π
def create_button(text, command):
    btn = ctk.CTkButton(app, text=text, command=command,
                        font=("Arial", 13),
                        width=200, height=40, corner_radius=20)
    btn.pack(pady=7)

create_button("–ü–æ–ø–æ–≤–Ω–∏—Ç–∏", deposit)
create_button("–ó–Ω—è—Ç–∏ –∫–æ—à—Ç–∏", withdraw)
create_button("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å", show_balance)
create_button("–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é", show_history)
create_button("–í–∏–π—Ç–∏", exit_app)

# –ó–∞–ø—É—Å–∫
app.mainloop()
