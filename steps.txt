✅ Етап 1 — main.py
- Початковий код банківської системи
- Містить "code smells": дублювання, магічні числа, довгі методи
- Виступає як original_code.py згідно з вимогами проєкту

✅ Етап 2 — ref1_code.py
- Рефакторинг 1: Витягнуто методи:
    - show_menu()
    - get_amount_input()
    - handle_choice()
- Рефакторинг 2: Заміна магічних чисел на константи:
    - INITIAL_BALANCE
    - MENU_DEPOSIT / WITHDRAW / BALANCE / HISTORY / EXIT
- Результат: зменшено складність main(), покращено читабельність коду

✅ Етап 3 — ref2_code.py
- Рефакторинг 3: Обʼєднання дублікатів умов:
    - Створено метод is_valid_amount(amount)
    - Перевірка валідності суми винесена з методів deposit і withdraw
- Результат: код став коротшим, логіка перевірки не дублюється

✅ Етап 4 — ref3_code.py
- Рефакторинг 4: Витяг класу (Extract Class)
    - Створено клас TransactionHistory
    - Вся логіка збереження та виведення історії перенесена до цього класу
- Результат: дотримано принципу єдиної відповідальності (SRP), спрощено клас BankAccount

✅ Етап 5 — ref4_code.py
- Рефакторинг 5: Винесення констант в окремий файл
    - Створено config.py
    - Всі значення меню та стартовий баланс тепер централізовано керуються
- Результат: зручне масштабування, менше дублювання, логічний поділ коду

✅ Етап 6 — ref5_code.py
- Рефакторинг 6: Витяг валідації в окремий клас Validator
    - Створено файл validator.py
    - Метод перевірки суми винесено з класу BankAccount
- Результат: клас очищено від зайвих відповідальностей, код став гнучкішим

✅ Етап 7 — ref6_code.py
- Рефакторинг 7: Винесення логіки меню в клас MenuService
    - Створено файл menu.py
    - Логіка меню та обробки команд більше не в main()
- Результат: чітке розділення інтерфейсу та логіки, підвищено підтримуваність

✅ Етап 8 — ref7_code.py (ref6_code.py)
- Рефакторинг 8: Винесення обробки введення в клас InputService
    - Створено файл services/input_service.py
    - Метод get_amount_input() замінено на InputService.get_float()
- Результат: логіка введення відокремлена від UI, підвищена модульність

✅ Етап 9 — ref8_code.py (ref6_code.py)
- Рефакторинг 9: Заміна рядків меню на Enum MenuOption
    - У services/config.py створено клас MenuOption (Enum)
    - Усі порівняння в меню замінено на Enum.value
- Результат: більше ніяких магічних значень, типобезпека, чистий код

✅ Етап 10 — ref7_code.py
- Рефакторинг 10: Декоратор логування
    - Створено services/logger.py
    - Декоратор log_action логує усі ключові методи BankAccount
- Результат: створено централізований лог-файл для аудиту дій користувача

✅ Етап 11 — ref8_code.py
- Рефакторинг 11: Винесено створення об'єкта BankAccount у фабрику
    - Створено services/factory.py з класом AccountFactory
    - BankAccount створюється не напряму, а через фабрику
- Результат: реалізовано Factory Pattern, покращено інкапсуляцію та масштабованість

✅ Етап 12 — ref9_code.py
- Рефакторинг 12: Впроваджено Command Pattern
    - Кожна дія меню стала окремим класом-командою
    - MenuService делегує виконання через словник команд
- Результат: OCP, менше if-ів, легке розширення команд у майбутньому

✅ Етап 13 — ref10_code.py
- Додано збереження стану акаунту після виходу
    - Створено services/storage.py
    - BankAccount отримав методи load() і save()
    - Дані зберігаються у data/account_data.json
- Результат: після перезапуску зберігається баланс і історія транзакцій

✅ Етап 14 — Повне тестування
- Створено модуль tests/test_bank.py
- Кількість тестів: 20
- Перевірено: поповнення, зняття, історія, баланс, валідність, персистентність, ім'я акаунту
- Тести проходять успішно
- Команда запуску: python -m unittest discover -s tests

✅ Етап 15 — Створення повноцінного GUI-додатку
- Створено графічний інтерфейс банківської системи на базі бібліотеки customtkinter.
- Усі дії (поповнення, зняття, перегляд балансу, історія) реалізовані через кнопки.
- Додано підтримку темного/світлого режиму з перемиканням у правому верхньому кутку.
- Кнопки стилізовані як заокруглені елементи з сучасним дизайном.
- Забезпечено розтягування вікна та адаптивність елементів.
- Вся логіка збереження балансу та історії — активна та працює як у CLI-версії.









✅ Завдання 3. Оригінальний та рефакторинговий код
У проєкті реалізовано дві окремі версії коду:

Оригінальний код — файл main.py:

Містить робочий код банківської системи з навмисно доданими недоліками ("code smells"), такими як дублювання коду, магічні числа, довгі методи, низька модульність.

Використовується як стартова точка для подальшого рефакторингу.

Рефакторингові версії — файли ref1_code.py, ref2_code.py, …:

Кожна наступна версія коду містить конкретні етапи рефакторингу.

Такий підхід дозволяє наочно порівнювати зміни та фіксувати поступове покращення структури, читабельності й підтримуваності коду.